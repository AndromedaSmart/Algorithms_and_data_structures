#include <iostream>
#include <vector>
 
using namespace std;
 
vector <pair<vector<int>, int>> a;
vector <vector <int>> b;
 
void dfs(int v) {
 
    b[v][0] = 0;
    b[v][1] = a[v].second;
 
    for (int i: a[v].first)
        dfs(i);
 
    for (int i: a[v].first) {
        b[v][1] += b[i][0];
        b[v][0] += max(b[i][0], b[i][1]);
    }
}
 
int main() {
 
    freopen("selectw.in", "r", stdin);
    freopen("selectw.out", "w", stdout);
 
    int n, v1, v2, root = 0;
    cin >> n;
    a.resize(n);
    b.resize(n, vector<int>(2));
 
    for (int i = 0; i < n; i++)
    {
        cin >> v1 >> v2;
        if (v1 == 0) {
            root = i;
            a[i].second = v2;
        }
 
        else {
            a[v1-1].first.push_back(i);
            a[i].second = v2;
        }
    }
 
    dfs(root);
    cout << max(b[root][0], b[root][1]);
 
}
