#include <fstream>
#include <vector>
 
using namespace std;
 
enum Game { loss, win };
void dfs(vector <vector <int>>& graph, vector <bool>& visited, vector<Game>& vertex, int from) {
    visited[from] = true;
    Game status = loss;
    for (int i = 0; i < graph[from].size(); i++) {
        int to = graph[from][i];
        if (!visited[to])
            dfs(graph, visited, vertex, to);
        if (vertex[to] == loss)
            status = win;
    }
    vertex[from] = status;
}
 
int main(){
 
    ifstream fin("game.in");
    ofstream fout("game.out");
 
    int n, m;
    int pich;
    fin >> n >> m >> pich;
    vector <vector <int>> graph(n);
    vector <Game> vertex(n);
    vector <bool> visited(n, false);
    for (int i = 0; i < m; i++) {
        int from, to;
        fin >> from >> to;
        graph[from - 1].push_back(to - 1);
    }
    dfs(graph, visited, vertex, pich - 1);
    if (vertex[pich - 1])
        fout << "First player wins" << endl;
    else
        fout << "Second player wins" << endl;
    return 0;
}
