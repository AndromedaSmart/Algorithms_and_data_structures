#include <iostream>
#include <string>
#include <vector>
 
using namespace std;
 
class PriorityQueue{
private:
 
    vector <int> a;
    int size = 0;
 
    void siftUp(int i){
        if ((i > 0) && (a[i] < a[(i - 1) / 2])){
            swap(a[i], a[(i - 1) / 2]);
            siftUp((i - 1) / 2);
        }
    }
 
    void siftDown(int i){
        int l = 2 * i + 1;
        int r = 2 * i + 2;
        int largest = i;
        if ((l < size) && (a[i] > a[l]))
            largest = l;
        if ((r < size) && (a[largest] > a[r]))
            largest = r;
        if (largest != i){
            swap(a[i], a[largest]);
            siftDown(largest);
        }
    }
 
    int FindKey(int key) {
        for (int i = 0; i < size; i++) {
            if (a[i] == key)
                return i;
        }
        return -1;
    }
 
public:
    PriorityQueue(){
        a.resize(1000000);
    }
 
    void push(int key) {
        a[size] = key;
        siftUp(size++);
    }
 
    int ExtractMin(){
        if (size > 0) {
            int value = a[0];
            a[0] = a[--size];
            siftDown(0);
            return value;
        }
        else
            return -1000000001;
    }
 
    void DecreaseKey(int key, int NewNumber){
        int index = FindKey(key);
        a[index] = NewNumber;
        siftUp(index);
    }
 
};
 
int main() {
    freopen("priorityqueue.in", "r", stdin);
    freopen("priorityqueue.out", "w", stdout);
 
    PriorityQueue priorit;
 
    vector <int> key(1000000);
 
    string cmd;
    int x, y;
    int count = 0;
    while (!cin.eof()) {
        cmd = "";
        cin >> cmd;
        if (cmd == "push") {
            cin >> x;
            priorit.push(x);
            key[count] = x;
        }
        else if (cmd == "extract-min") {
            int min = priorit.ExtractMin();
            if (min > -1000000001)
                cout << min << endl;
            else
                cout << '*' << endl;
        }
        else if (cmd == "decrease-key") {
            cin >> x >> y;
            priorit.DecreaseKey(key[x - 1], y);
            key[x - 1] = y;
        }
        count++;
    }
    return 0;
}
