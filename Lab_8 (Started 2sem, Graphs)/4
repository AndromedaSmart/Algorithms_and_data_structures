#include <iostream>
#include <vector>
 
using namespace std;
 
vector <int> matrix[100001];
int apd[100001];
bool abc[100001];
 
void dfs(int current) {
 
    abc[current] = true;
    for (int i = 0; i <matrix[current].size(); ++i) {
        int nxt = matrix[current][i];
        if (!abc[nxt]) {
            apd[nxt] = apd[current];
            dfs(nxt);
        }
    }
}
 
int main() {
    int n,m;
    int b,e;
 
    freopen("components.in", "r", stdin);
    freopen("components.out", "w", stdout);
 
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        cin >> b >> e;
        matrix[b - 1].push_back(e - 1);
        matrix[e - 1].push_back(b - 1);
    }
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        if (!abc[i]) {
            ++cnt;
            apd[i] = cnt;
            dfs(i);
        }
    }
    cout << cnt << "\n";
    for (int i = 0; i < n; i++) {
        cout << apd[i] << " ";
    }
 
    return 0;
}
